// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mingh.research.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import mingh.research.model.TSNCJobDataOnDemand;
import mingh.research.model.TSNCOptimizationProcess;
import mingh.research.model.TSNCOptimizationProcessDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TSNCOptimizationProcessDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TSNCOptimizationProcessDataOnDemand: @Component;
    
    private Random TSNCOptimizationProcessDataOnDemand.rnd = new SecureRandom();
    
    private List<TSNCOptimizationProcess> TSNCOptimizationProcessDataOnDemand.data;
    
    @Autowired
    TSNCJobDataOnDemand TSNCOptimizationProcessDataOnDemand.tSNCJobDataOnDemand;
    
    public TSNCOptimizationProcess TSNCOptimizationProcessDataOnDemand.getNewTransientTSNCOptimizationProcess(int index) {
        TSNCOptimizationProcess obj = new TSNCOptimizationProcess();
        setAlphaHOMOs(obj, index);
        setAlphaLUMOs(obj, index);
        setBetaHOMOs(obj, index);
        setBetaLUMOs(obj, index);
        setDetailedForces(obj, index);
        setEnergies(obj, index);
        setForces(obj, index);
        setGeometries(obj, index);
        setUniqueName(obj, index);
        return obj;
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setAlphaHOMOs(TSNCOptimizationProcess obj, int index) {
        String alphaHOMOs = "alphaHOMOs_" + index;
        if (alphaHOMOs.length() > 10000) {
            alphaHOMOs = alphaHOMOs.substring(0, 10000);
        }
        obj.setAlphaHOMOs(alphaHOMOs);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setAlphaLUMOs(TSNCOptimizationProcess obj, int index) {
        String alphaLUMOs = "alphaLUMOs_" + index;
        if (alphaLUMOs.length() > 10000) {
            alphaLUMOs = alphaLUMOs.substring(0, 10000);
        }
        obj.setAlphaLUMOs(alphaLUMOs);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setBetaHOMOs(TSNCOptimizationProcess obj, int index) {
        String betaHOMOs = "betaHOMOs_" + index;
        if (betaHOMOs.length() > 10000) {
            betaHOMOs = betaHOMOs.substring(0, 10000);
        }
        obj.setBetaHOMOs(betaHOMOs);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setBetaLUMOs(TSNCOptimizationProcess obj, int index) {
        String betaLUMOs = "betaLUMOs_" + index;
        if (betaLUMOs.length() > 10000) {
            betaLUMOs = betaLUMOs.substring(0, 10000);
        }
        obj.setBetaLUMOs(betaLUMOs);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setDetailedForces(TSNCOptimizationProcess obj, int index) {
        byte[] detailedForces = String.valueOf(index).getBytes();
        obj.setDetailedForces(detailedForces);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setEnergies(TSNCOptimizationProcess obj, int index) {
        String energies = "energies_" + index;
        if (energies.length() > 10000) {
            energies = energies.substring(0, 10000);
        }
        obj.setEnergies(energies);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setForces(TSNCOptimizationProcess obj, int index) {
        String forces = "forces_" + index;
        if (forces.length() > 10000) {
            forces = forces.substring(0, 10000);
        }
        obj.setForces(forces);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setGeometries(TSNCOptimizationProcess obj, int index) {
        byte[] geometries = String.valueOf(index).getBytes();
        obj.setGeometries(geometries);
    }
    
    public void TSNCOptimizationProcessDataOnDemand.setUniqueName(TSNCOptimizationProcess obj, int index) {
        String uniqueName = "uniqueName_" + index;
        if (uniqueName.length() > 100) {
            uniqueName = uniqueName.substring(0, 100);
        }
        obj.setUniqueName(uniqueName);
    }
    
    public TSNCOptimizationProcess TSNCOptimizationProcessDataOnDemand.getSpecificTSNCOptimizationProcess(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TSNCOptimizationProcess obj = data.get(index);
        Long id = obj.getId();
        return TSNCOptimizationProcess.findTSNCOptimizationProcess(id);
    }
    
    public TSNCOptimizationProcess TSNCOptimizationProcessDataOnDemand.getRandomTSNCOptimizationProcess() {
        init();
        TSNCOptimizationProcess obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return TSNCOptimizationProcess.findTSNCOptimizationProcess(id);
    }
    
    public boolean TSNCOptimizationProcessDataOnDemand.modifyTSNCOptimizationProcess(TSNCOptimizationProcess obj) {
        return false;
    }
    
    public void TSNCOptimizationProcessDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TSNCOptimizationProcess.findTSNCOptimizationProcessEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TSNCOptimizationProcess' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TSNCOptimizationProcess>();
        for (int i = 0; i < 10; i++) {
            TSNCOptimizationProcess obj = getNewTransientTSNCOptimizationProcess(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
