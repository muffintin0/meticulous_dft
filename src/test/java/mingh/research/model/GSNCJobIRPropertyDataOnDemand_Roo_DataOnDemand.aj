// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mingh.research.model;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import mingh.research.model.GSNCJobDataOnDemand;
import mingh.research.model.GSNCJobIRProperty;
import mingh.research.model.GSNCJobIRPropertyDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GSNCJobIRPropertyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GSNCJobIRPropertyDataOnDemand: @Component;
    
    private Random GSNCJobIRPropertyDataOnDemand.rnd = new SecureRandom();
    
    private List<GSNCJobIRProperty> GSNCJobIRPropertyDataOnDemand.data;
    
    @Autowired
    GSNCJobDataOnDemand GSNCJobIRPropertyDataOnDemand.gSNCJobDataOnDemand;
    
    public GSNCJobIRProperty GSNCJobIRPropertyDataOnDemand.getNewTransientGSNCJobIRProperty(int index) {
        GSNCJobIRProperty obj = new GSNCJobIRProperty();
        setCv(obj, index);
        setFreqNumbers(obj, index);
        setG(obj, index);
        setH(obj, index);
        setIntensities(obj, index);
        setNormModes(obj, index);
        setS(obj, index);
        setT(obj, index);
        setU(obj, index);
        setUniqueName(obj, index);
        return obj;
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setCv(GSNCJobIRProperty obj, int index) {
        BigDecimal Cv = BigDecimal.valueOf(index);
        if (Cv.compareTo(new BigDecimal("99999.999")) == 1) {
            Cv = new BigDecimal("99999.999");
        }
        obj.setCv(Cv);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setFreqNumbers(GSNCJobIRProperty obj, int index) {
        String freqNumbers = "freqNumbers_" + index;
        if (freqNumbers.length() > 20000) {
            freqNumbers = freqNumbers.substring(0, 20000);
        }
        obj.setFreqNumbers(freqNumbers);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setG(GSNCJobIRProperty obj, int index) {
        BigDecimal G = BigDecimal.valueOf(index);
        if (G.compareTo(new BigDecimal("99999.999")) == 1) {
            G = new BigDecimal("99999.999");
        }
        obj.setG(G);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setH(GSNCJobIRProperty obj, int index) {
        BigDecimal H = BigDecimal.valueOf(index);
        if (H.compareTo(new BigDecimal("99999.999")) == 1) {
            H = new BigDecimal("99999.999");
        }
        obj.setH(H);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setIntensities(GSNCJobIRProperty obj, int index) {
        String intensities = "intensities_" + index;
        if (intensities.length() > 20000) {
            intensities = intensities.substring(0, 20000);
        }
        obj.setIntensities(intensities);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setNormModes(GSNCJobIRProperty obj, int index) {
        byte[] normModes = String.valueOf(index).getBytes();
        obj.setNormModes(normModes);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setS(GSNCJobIRProperty obj, int index) {
        BigDecimal S = BigDecimal.valueOf(index);
        if (S.compareTo(new BigDecimal("99999.999")) == 1) {
            S = new BigDecimal("99999.999");
        }
        obj.setS(S);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setT(GSNCJobIRProperty obj, int index) {
        BigDecimal T = BigDecimal.valueOf(index);
        if (T.compareTo(new BigDecimal("99999.999")) == 1) {
            T = new BigDecimal("99999.999");
        }
        obj.setT(T);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setU(GSNCJobIRProperty obj, int index) {
        BigDecimal U = BigDecimal.valueOf(index);
        if (U.compareTo(new BigDecimal("99999.999")) == 1) {
            U = new BigDecimal("99999.999");
        }
        obj.setU(U);
    }
    
    public void GSNCJobIRPropertyDataOnDemand.setUniqueName(GSNCJobIRProperty obj, int index) {
        String uniqueName = "uniqueName_" + index;
        if (uniqueName.length() > 100) {
            uniqueName = uniqueName.substring(0, 100);
        }
        obj.setUniqueName(uniqueName);
    }
    
    public GSNCJobIRProperty GSNCJobIRPropertyDataOnDemand.getSpecificGSNCJobIRProperty(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        GSNCJobIRProperty obj = data.get(index);
        Long id = obj.getId();
        return GSNCJobIRProperty.findGSNCJobIRProperty(id);
    }
    
    public GSNCJobIRProperty GSNCJobIRPropertyDataOnDemand.getRandomGSNCJobIRProperty() {
        init();
        GSNCJobIRProperty obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return GSNCJobIRProperty.findGSNCJobIRProperty(id);
    }
    
    public boolean GSNCJobIRPropertyDataOnDemand.modifyGSNCJobIRProperty(GSNCJobIRProperty obj) {
        return false;
    }
    
    public void GSNCJobIRPropertyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = GSNCJobIRProperty.findGSNCJobIRPropertyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'GSNCJobIRProperty' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<GSNCJobIRProperty>();
        for (int i = 0; i < 10; i++) {
            GSNCJobIRProperty obj = getNewTransientGSNCJobIRProperty(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
