// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mingh.research.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import mingh.research.model.TSFCJobDataOnDemand;
import mingh.research.model.TSFCStoredFiles;
import mingh.research.model.TSFCStoredFilesDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TSFCStoredFilesDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TSFCStoredFilesDataOnDemand: @Component;
    
    private Random TSFCStoredFilesDataOnDemand.rnd = new SecureRandom();
    
    private List<TSFCStoredFiles> TSFCStoredFilesDataOnDemand.data;
    
    @Autowired
    TSFCJobDataOnDemand TSFCStoredFilesDataOnDemand.tSFCJobDataOnDemand;
    
    public TSFCStoredFiles TSFCStoredFilesDataOnDemand.getNewTransientTSFCStoredFiles(int index) {
        TSFCStoredFiles obj = new TSFCStoredFiles();
        setCalculationType(obj, index);
        setConvergence(obj, index);
        setFileSize(obj, index);
        setFileType(obj, index);
        setRelativePath(obj, index);
        setUniqueName(obj, index);
        return obj;
    }
    
    public void TSFCStoredFilesDataOnDemand.setCalculationType(TSFCStoredFiles obj, int index) {
        String calculationType = "calculat_" + index;
        if (calculationType.length() > 10) {
            calculationType = calculationType.substring(0, 10);
        }
        obj.setCalculationType(calculationType);
    }
    
    public void TSFCStoredFilesDataOnDemand.setConvergence(TSFCStoredFiles obj, int index) {
        String convergence = "converge_" + index;
        if (convergence.length() > 10) {
            convergence = convergence.substring(0, 10);
        }
        obj.setConvergence(convergence);
    }
    
    public void TSFCStoredFilesDataOnDemand.setFileSize(TSFCStoredFiles obj, int index) {
        Long fileSize = new Integer(index).longValue();
        if (fileSize < 1L) {
            fileSize = 1L;
        }
        obj.setFileSize(fileSize);
    }
    
    public void TSFCStoredFilesDataOnDemand.setFileType(TSFCStoredFiles obj, int index) {
        String fileType = "fileType_" + index;
        if (fileType.length() > 20) {
            fileType = fileType.substring(0, 20);
        }
        obj.setFileType(fileType);
    }
    
    public void TSFCStoredFilesDataOnDemand.setRelativePath(TSFCStoredFiles obj, int index) {
        String relativePath = "relativePath_" + index;
        if (relativePath.length() > 500) {
            relativePath = relativePath.substring(0, 500);
        }
        obj.setRelativePath(relativePath);
    }
    
    public void TSFCStoredFilesDataOnDemand.setUniqueName(TSFCStoredFiles obj, int index) {
        String uniqueName = "uniqueName_" + index;
        if (uniqueName.length() > 100) {
            uniqueName = uniqueName.substring(0, 100);
        }
        obj.setUniqueName(uniqueName);
    }
    
    public TSFCStoredFiles TSFCStoredFilesDataOnDemand.getSpecificTSFCStoredFiles(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TSFCStoredFiles obj = data.get(index);
        Long id = obj.getId();
        return TSFCStoredFiles.findTSFCStoredFiles(id);
    }
    
    public TSFCStoredFiles TSFCStoredFilesDataOnDemand.getRandomTSFCStoredFiles() {
        init();
        TSFCStoredFiles obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return TSFCStoredFiles.findTSFCStoredFiles(id);
    }
    
    public boolean TSFCStoredFilesDataOnDemand.modifyTSFCStoredFiles(TSFCStoredFiles obj) {
        return false;
    }
    
    public void TSFCStoredFilesDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TSFCStoredFiles.findTSFCStoredFilesEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TSFCStoredFiles' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TSFCStoredFiles>();
        for (int i = 0; i < 10; i++) {
            TSFCStoredFiles obj = getNewTransientTSFCStoredFiles(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
