// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mingh.research.model;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import mingh.research.model.JobResource;
import mingh.research.model.JobResourceDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect JobResourceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: JobResourceDataOnDemand: @Component;
    
    private Random JobResourceDataOnDemand.rnd = new SecureRandom();
    
    private List<JobResource> JobResourceDataOnDemand.data;
    
    public JobResource JobResourceDataOnDemand.getNewTransientJobResource(int index) {
        JobResource obj = new JobResource();
        setCpus(obj, index);
        setMemory(obj, index);
        setRunTime(obj, index);
        setUniqueName(obj, index);
        return obj;
    }
    
    public void JobResourceDataOnDemand.setCpus(JobResource obj, int index) {
        Integer cpus = new Integer(index);
        if (cpus < 0) {
            cpus = 0;
        }
        obj.setCpus(cpus);
    }
    
    public void JobResourceDataOnDemand.setMemory(JobResource obj, int index) {
        Integer memory = new Integer(index);
        if (memory < 0) {
            memory = 0;
        }
        obj.setMemory(memory);
    }
    
    public void JobResourceDataOnDemand.setRunTime(JobResource obj, int index) {
        BigDecimal runTime = BigDecimal.valueOf(index);
        if (runTime.compareTo(new BigDecimal("99999.9")) == 1) {
            runTime = new BigDecimal("99999.9");
        }
        obj.setRunTime(runTime);
    }
    
    public void JobResourceDataOnDemand.setUniqueName(JobResource obj, int index) {
        String uniqueName = "uniqueName_" + index;
        if (uniqueName.length() > 100) {
            uniqueName = uniqueName.substring(0, 100);
        }
        obj.setUniqueName(uniqueName);
    }
    
    public JobResource JobResourceDataOnDemand.getSpecificJobResource(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        JobResource obj = data.get(index);
        Long id = obj.getId();
        return JobResource.findJobResource(id);
    }
    
    public JobResource JobResourceDataOnDemand.getRandomJobResource() {
        init();
        JobResource obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return JobResource.findJobResource(id);
    }
    
    public boolean JobResourceDataOnDemand.modifyJobResource(JobResource obj) {
        return false;
    }
    
    public void JobResourceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = JobResource.findJobResourceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'JobResource' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<JobResource>();
        for (int i = 0; i < 10; i++) {
            JobResource obj = getNewTransientJobResource(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
