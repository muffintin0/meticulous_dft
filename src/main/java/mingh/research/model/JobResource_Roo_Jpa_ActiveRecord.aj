// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package mingh.research.model;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import mingh.research.model.JobResource;
import org.springframework.transaction.annotation.Transactional;

privileged aspect JobResource_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager JobResource.entityManager;
    
    public static final EntityManager JobResource.entityManager() {
        EntityManager em = new JobResource().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long JobResource.countJobResources() {
        return entityManager().createQuery("SELECT COUNT(o) FROM JobResource o", Long.class).getSingleResult();
    }
    
    public static List<JobResource> JobResource.findAllJobResources() {
        return entityManager().createQuery("SELECT o FROM JobResource o", JobResource.class).getResultList();
    }
    
    public static JobResource JobResource.findJobResource(Long id) {
        if (id == null) return null;
        return entityManager().find(JobResource.class, id);
    }
    
    public static List<JobResource> JobResource.findJobResourceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM JobResource o", JobResource.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void JobResource.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void JobResource.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            JobResource attached = JobResource.findJobResource(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void JobResource.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void JobResource.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public JobResource JobResource.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        JobResource merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
